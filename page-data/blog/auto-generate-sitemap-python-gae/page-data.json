{"componentChunkName":"component---src-templates-blog-detail-js","path":"/blog/auto-generate-sitemap-python-gae","result":{"data":{"contentfulBlog":{"id":"53d2fe3e-b2bb-58ce-a640-cf989f5364c8","imageGallery":null,"date":"2019-01-09","title":"Auto-Generate your Sitemap.xml with Python and deploy it as a Cron job  to Google Cloud.","subtitle":{"id":"1c494d92-f5c2-5cf7-878c-cdc00680943e","subtitle":"A simple python script to automatically generate your sitemap.xml file using Cron on Google Cloud App Engine."},"slug":"auto-generate-sitemap-python-gae","mainImage":null,"content":{"id":"a314469c-a002-5088-abde-284022711acc","content":"Sitemaps are useful for increasing the effectiveness of your SEO. If you head over to [Google's Search Console](https://search.google.com/search-console/about \"Google Search Console\") you'll find a section to upload a file called `sitemap.xml`. \n\nThere are many ways to create this file, from writing it manually (tedious) to having one of many sites out there index your site and generate the file for you. Either of those options are fine for smaller, static websites, but what if you have a large, high traffic, data driven site with constant updates? Well, then you run into problems :-( \n\nBut the solution is very easy.\n\n#### This example is done in Python, but the idea is the same for any language.\n\nFirst, this is what `sitemap.xml` looks like.\n\n```\n<?xml version='1.0' encoding='utf-8'?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n\t<url>\n\t\t<loc>https://www.yoursite.com/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>1.0</priority>\n\t</url>\n\t<url>\n\t\t<loc>https://www.yoursite.com/product/1/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>0.8</priority>\n\t</url>\n\t<url>\n\t\t<loc>https://www.yoursite.com/product/2/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>0.8</priority>\n\t</url>\n  \n  ...and so on ...\n</urlset>\n```\n\nThe first part is the XML declaration, which points to the schema on www.sitemaps.org. Following that are the nodes that point to pages on your website. As you can imagine, for large data driven websites with thousands of generated pages, maintaining this file can be really difficult.\n\n##### Let's start coding.\n\nStart by opening a new file in your text editor and add this block of code to generate the XML declaration and root `<url>` node:\n\n```\nimport xml.etree.cElementTree as ET\nfrom datetime import datetime\n\ndef generate_sitemap():\n\n    schema_loc = (\"http://www.sitemaps.org/schemas/sitemap/0.9 \"\n                  \"http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\")\n\n    root = ET.Element(\"urlset\")\n    root.attrib['xmlns:xsi'] = 'http://www.w3.org/2001/XMLSchema-instance'\n    root.attrib['xsi:schemaLocation'] = schema_loc\n    root.attrib['xmlns'] = \"http://www.sitemaps.org/schemas/sitemap/0.9\"\n    \n    tree = ET.ElementTree(root)\n        tree.write(\"sitemap.xml\",\n                   encoding='utf-8', xml_declaration=True)\n```\nWe've started by importing `xml.etree.cElementTree`, a built-in python package for parsing XML. Then we created a function called `generate_sitemap()`, in which we define XML schema info and the `<urlset>` node.\n\nAt this point, if you were to run this block of code in your Python Console, it would generate a sitemap.xml file in the current directory that looks sort of like this:\n\n```\n<?xml version='1.0' encoding='utf-8'?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n```\n\nSo we're off to a good start! Now under that, we're going to write code to generate our static pages like home page, login, registration, etc.\n\n```\n_url = \"https://www.your-website.com/\"  # <-- Your website domain.\ndt = datetime.now().strftime(\"%Y-%m-%d\")  # <-- Get current date and time.\n\ndoc = ET.SubElement(root, \"url\")\nET.SubElement(doc, \"loc\").text = _url\nET.SubElement(doc, \"lastmod\").text = dt\nET.SubElement(doc, \"changefreq\").text = 'weekly'\nET.SubElement(doc, \"priority\").text = \"1.0\"\n\ndoc = ET.SubElement(root, \"url\")\nET.SubElement(doc, \"loc\").text = (f\"{_url}login/\")\nET.SubElement(doc, \"lastmod\").text = dt\nET.SubElement(doc, \"changefreq\").text = 'weekly'\nET.SubElement(doc, \"priority\").text = \"0.6\"\n\ndoc = ET.SubElement(root, \"url\")\nET.SubElement(doc, \"loc\").text = f\"{_url}register/\"\nET.SubElement(doc, \"lastmod\").text = dt\nET.SubElement(doc, \"changefreq\").text = 'weekly'\nET.SubElement(doc, \"priority\").text = \"0.6\"\n```\n\nJust a lot of copy/paste going on. Let's break down what's happening here. We've set two variables:\n- `_url` is your website root url.\n- `dt` is the current date/time formatted as YYYY-MM-DD\n\nNext we create the `<url>` node as a sub element to the document like this: `doc = ET.SubElement(root, \"url\")`. Then we create the `<loc>`, `<lastmod>`, `<changefreq>`, and `<priority>` nodes, which are child nodes of the `<url>` node.\n\nJust for the sake of clarity, `f\"{_url}login/\"` is using string interpolation formatting to create your page URL. In this case, Python will render the string as `https://www.your-website.com/login`. This save us from having to write out your website URL over and over again.\n\nIf we were to run this code now, it will generate a file that looks like this:\n\n```\n<?xml version='1.0' encoding='utf-8'?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n\t<url>\n\t\t<loc>https://www.your-website.com/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>1.0</priority>\n\t</url>\n\t<url>\n\t\t<loc>https://www.your-website.com/login/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>0.8</priority>\n\t</url>\n\t<url>\n\t\t<loc>https://www.your-website.com/register/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>0.8</priority>\n\t</url>\n</urlset>\n```\nPretty cool, right? But what about all those web pages that are generated by your CMS or database? I mean, we can't possibly copy/paste that much stuff.\n\n##### Querying your database\n\nFor this part I'm using Django as my frontend to Python. Again, you can use whatever framework or language you want, the idea is still the same. Open your Django app and copy/paste your code into views.py, updating it with the code below.\n\n```\nimport xml.etree.cElementTree as ET\nfrom datetime import datetime\n\nfrom django.http import HttpResponse # <-- We need this to return a response\nfrom .models import MyProductModel  # <-- Import my model\n\n\ndef generate_sitemap(request):\n\n    _url = \"https://www.your-website.com/\"  # <-- Your website domain.\n    dt = datetime.now().strftime(\"%Y-%m-%d\")  # <-- Get current date and time.\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = _url\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"1.0\"\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = (f\"{_url}login/\")\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"0.6\"\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = f\"{_url}register/\"\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"0.6\"\n    \n    return HttpResponse(status=\"200\")\n```\n\nWe've imported our database model `MyProductModel`, and since we're using Django, we updated our `generate_sitemap` function with the `request` argument and we added an HTTP response. \n\nIn short, we've made our sitemap.xml generator into a web page. I'll explain why further down. But first, let's write the code to generate all of our product pages in the CMS.\n```\nproducts = MyProductModel.objects.all()\n\nfor product in products:  # <-- Loop through product queryset\n  doc = ET.SubElement(root, \"url\")\n        ET.SubElement(doc, \"loc\").text = f\"{_url}{product.slug}/\"\n        ET.SubElement(doc, \"lastmod\").text = dt\n        ET.SubElement(doc, \"changefreq\").text = 'weekly'\n        ET.SubElement(doc, \"priority\").text = \"0.8\"\n```\nWhat we've done here is query our database for all \"product\" pages with `MyProductModel.objects.all()`, then loop through the queryset to generate `<url>` nodes for every page. This could be 10 products or 1000 or even more.\n\nLet's look at our `<loc>` node. We were smart from the beginning when we added products to our system because we added slug fields. So instead of a URL like `your-website.com/1028346?sku=28473849/` our product page urls are pretty like `your-website.com/good-life-product/`.\n\nAnyway, the final code looks like this:\n```\nimport xml.etree.cElementTree as ET\nfrom datetime import datetime\n\nfrom django.http import HttpResponse\nfrom .models import MyProductModel\n\n\ndef generate_sitemap(request):\n\n    _url = \"https://www.your-website.com/\"  # <-- Your website domain.\n    dt = datetime.now().strftime(\"%Y-%m-%d\")  # <-- Get current date and time.\n    \n    schema_loc = (\"http://www.sitemaps.org/schemas/sitemap/0.9 \"\n                  \"http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\")\n\n    root = ET.Element(\"urlset\")\n    root.attrib['xmlns:xsi'] = 'http://www.w3.org/2001/XMLSchema-instance'\n    root.attrib['xsi:schemaLocation'] = schema_loc\n    root.attrib['xmlns'] = \"http://www.sitemaps.org/schemas/sitemap/0.9\"\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = _url\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"1.0\"\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = (f\"{_url}login/\")\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"0.6\"\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = f\"{_url}register/\"\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"0.6\"\n    \n    products = MyProductModel.objects.all()\n\n    for product in products:\n      doc = ET.SubElement(root, \"url\")\n            ET.SubElement(doc, \"loc\").text = f\"{_url}{product.slug}/\"\n            ET.SubElement(doc, \"lastmod\").text = dt\n            ET.SubElement(doc, \"changefreq\").text = 'weekly'\n            ET.SubElement(doc, \"priority\").text = \"0.8\"\n            \n    tree = ET.ElementTree(root)\n        tree.write(\"sitemap.xml\",\n                   encoding='utf-8', xml_declaration=True)\n    \n    return HttpResponse(status=\"200\")\n```\n\n##### Adding the page to your urls.py\n\nFor Google to read your sitemap it needs to be rendered as a static XML file and available in your root as `your-website.com/sitemap.xml`. This means we need to add it to our URL patterns as a `TemplateView` in our urls.py.\n\n```\n# project/urls.py\n\nfrom django.conf.urls import url\nfrom django.views.generic import TemplateView\n\nurlpatterns = [\n    url(r'^sitemap\\.xml$',\n        TemplateView.as_view(\n            template_name='sitemap.xml',\n            content_type='text/xml'\n            )\n        ),\n]\n```\n`TemplateView` will load sitemap.xml, as a static file, from the root of your templates directory. Remember you need to set the content_type to `text/xml` if you want the file to render correctly.\n\n<div class=\"uk-child-width-2-3@s uk-margin-large-top uk-margin-medium-bottom\" uk-grid>\n  <div>\n    <div class=\"uk-panel uk-background-primary uk-light uk-padding-small uk-border-rounded\">\n      On a side note, you can load other static files using `TemplateView`. Here's an example of a boilerplate I use to serve robots.txt, ServiceWorker.js, and manifest.json.\n    </div>\n  </div>\n</div>\n\n```\nfrom django.conf.urls import url\nfrom django.views.generic import TemplateView\n\n\nurlpatterns = [\n    url(r'^manifest\\.json$',\n        TemplateView.as_view(\n            template_name='manifest.json',\n            content_type='application/manifest+json'\n            )\n        ),\n    url(r'^ServiceWorker\\.js$',\n        TemplateView.as_view(\n            template_name='ServiceWorker.js',\n            content_type='application/javascript'\n            )\n        ),\n    url(r'^robots\\.txt$',\n        TemplateView.as_view(\n            template_name='robots.txt',\n            content_type='text/plain'\n            )\n        ),\n    url(r'^sitemap\\.xml$',\n        TemplateView.as_view(\n            template_name='sitemap.xml',\n            content_type='text/xml'\n            )\n        ),\n    url(r'^offline\\.html$',\n        TemplateView.as_view(\n            template_name='offline.html',\n            content_type='text/html'\n            )\n        ),\n]\n```\n\n##### Google Cloud App Engine &amp; Cron jobs\nOkay, so we have a url pattern set up to serve our sitemap.xml for search spiders, but how do we generate the file?\n\nWe're going to create a Cron job that automatically runs every couple of weeks, to generate our sitemap.xml, and save it to our templates directory.\n\n<div class=\"uk-child-width-2-3@s uk-margin-large-top uk-margin-medium-bottom\" uk-grid>\n  <div>\n    <div class=\"uk-panel uk-background-primary uk-light uk-padding-small uk-border-rounded\">\n      I'm not going to go into detail about setting up your project on Google Cloud, that's a whole other story. And again, you could be using another platform like AWS or even hosting yourself, it doesn't matter.\n    </div>\n  </div>\n</div>\n\nLet's create a url pattern for our `generate_sitemap` view and add it to the app urls.py:\n\n```\n# app/urls.py\n\nfrom django.conf.urls import url\n\nfrom . import views\n\nurlpatterns = [\n\n    ... other url patterns ...\n    \n    url(\n        r'^generate-sitemap/$',\n        views.generate_sitemap\n    ),\n]\n```\nNow you should be able to visit http://localhost:8000/generate-sitemap/ and your sitemap function will create the sitemap.xml file in your templates directory.\n\nExcellent.\n\nNext, in your project root directory, create a file called `cron.yaml` then add this:\n\n```\n# root/cron.yaml\n\ncron:\n- description: \"Generate MySitemap CRON\"\n  url: /generate-sitemap/\n  schedule: every 14 days\n  retry_parameters:\n    min_backoff_seconds: 120\n    max_doublings: 5\n```\nThis creates a Cron job for App Engine that will visit your generate_sitemap function at `www.your-website/generate-sitemap/` every 14 days to generate an updated sitemap.xml file and save it to your templates directory so that it's accessible by Google and other search engines.\n\nPush the Cron job to App Engine with this terminal command:\n\n`gcloud app deploy cron.yaml`\n\nThen visit your Google Console, under App Engine, you'll see a link for Cron jobs, where you'll find your new \"Generate MySitemap CRON\" job listed.\n\n![cron](//images.ctfassets.net/1nc0h0ipk4bl/3UnANf5TSGhKxHxwCe4e1i/8ffd2b1f499040d54d5b06ad057119c8/cron.png)\n\nOkay, you now have a Cron job set up to visit your sitemap generator every 14 days. But, there's a problem...\n\n##### Security?\n\nWe don't want just anybody to have access, we only want our Cron job to access the function. But then, we can't give the Cron job admin access either.\n\nSo, we're going to use headers to exclude any connections not from our Cron job. This is safe because the `x-appengine-cron` header is only passed within Google's network, meaning it's unlikely to be spoofed.\n\nWe need to update our view to block everybody except our Cron job.\n\n```\nimport xml.etree.cElementTree as ET\nfrom datetime import datetime\n\nfrom django.http import HttpResponse\nfrom .models import MyProductModel\n\n\ndef generate_sitemap(request):\n\n    _url = \"https://www.your-website.com/\"  # <-- Your website domain.\n    dt = datetime.now().strftime(\"%Y-%m-%d\")  # <-- Get current date and time.\n    \n    schema_loc = (\"http://www.sitemaps.org/schemas/sitemap/0.9 \"\n                  \"http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\")\n                  \n    if request.META.get('HTTP_X_APPENGINE_CRON'):  #  <-- check if the x-appengine-cron header exists\n      root = ET.Element(\"urlset\")\n      root.attrib['xmlns:xsi'] = 'http://www.w3.org/2001/XMLSchema-instance'\n      root.attrib['xsi:schemaLocation'] = schema_loc\n      root.attrib['xmlns'] = \"http://www.sitemaps.org/schemas/sitemap/0.9\"\n\n      doc = ET.SubElement(root, \"url\")\n      ET.SubElement(doc, \"loc\").text = _url\n      ET.SubElement(doc, \"lastmod\").text = dt\n      ET.SubElement(doc, \"changefreq\").text = 'weekly'\n      ET.SubElement(doc, \"priority\").text = \"1.0\"\n\n      doc = ET.SubElement(root, \"url\")\n      ET.SubElement(doc, \"loc\").text = (f\"{_url}login/\")\n      ET.SubElement(doc, \"lastmod\").text = dt\n      ET.SubElement(doc, \"changefreq\").text = 'weekly'\n      ET.SubElement(doc, \"priority\").text = \"0.6\"\n\n      doc = ET.SubElement(root, \"url\")\n      ET.SubElement(doc, \"loc\").text = f\"{_url}register/\"\n      ET.SubElement(doc, \"lastmod\").text = dt\n      ET.SubElement(doc, \"changefreq\").text = 'weekly'\n      ET.SubElement(doc, \"priority\").text = \"0.6\"\n\n      products = MyProductModel.objects.all()\n\n      for product in products:\n        doc = ET.SubElement(root, \"url\")\n              ET.SubElement(doc, \"loc\").text = f\"{_url}{product.slug}/\"\n              ET.SubElement(doc, \"lastmod\").text = dt\n              ET.SubElement(doc, \"changefreq\").text = 'weekly'\n              ET.SubElement(doc, \"priority\").text = \"0.8\"\n\n      tree = ET.ElementTree(root)\n          tree.write(\"sitemap.xml\",\n                     encoding='utf-8', xml_declaration=True)\n\n      return HttpResponse(status=\"200\")\n    else:\n      return HttpResponse(status=\"403\")  # <-- Return \"Not Allowed\" for everybody else.\n```\n\nNow you can deploy your project `gcloud app deploy` and test your Cron job by clicking the \"Run now\" button on your Cron page on Google Console.\n\nAnd that's it!"}}},"pageContext":{"slug":"auto-generate-sitemap-python-gae"}}}