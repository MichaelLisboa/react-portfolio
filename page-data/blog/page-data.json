{"componentChunkName":"component---src-pages-blog-js","path":"/blog/","result":{"data":{"allContentfulBlog":{"nodes":[{"id":"9a691ade-0b54-54e4-bd00-c7872a34fba3","content":{"id":"e57d91c5-2474-55c7-b29c-a0fbc9d83e96","content":"#### Doing business in the digital world is a demanding challenge. As marketers, we now must communicate with a new kind of audience; an audience that consumes a different kind of content in very different channels.\n\nThis forces us to think differently about how and where we tell our brand stories. This is where experience design becomes a core business practice for innovation and better user experiences.\n\n#### What is an Experience Designer?\n\nI'm often asked, \"What is an Experience Designer?\". The answer is part marketer, part creative, all behaviorist.\n\nExperience design is the humanization of marketing communications, not for users or target audiences, but for people like you and me. We tell stories about products, services, processes and environments in a way that is personal, relevant, and meaningful to people.\n\nWhether in the office or classroom, on a desktop computer, on the BTS, or on a mobile phone. The right content in the right context is a win for your brand and the people you’re speaking to.\n\nAn Experience Designer closes the gap between data insights, marketing and creative storytelling. Someone who looks at all aspects of a brand, product, or ad campaign and asks, \"how will people really feel about this?\"\n\n#### What is UX Design?\n\nUser Experience Design is experience design when it pertains to digital and interactive products. Launching an app? Website? Digital activation? This is when UX comes in handy.\n\nThe practice of UX focuses on how we explore and design what the experience will be like when your audience interacts with your product or service—before, during and after it’s designed, developed and released to the public.\n\nUX is both science and art. A UX Designer will work with your marketing team, your IT department, your developers, and your creative team. They will have a part in market research, content development, data analysis and more.\n\nThey will perform ethnography research, create wireframes and prototypes, run usability testing and have a part in planning development schedules. They will coordinate with your design teams, and your IT team, track goals and work with you to take your product from concept to launch.\n\nSo, part digital marketer, part UI designer and part project manager, all with the ultimate goal of connecting business objectives to your audience’s needs. That’s a lot to handle!\n\n#### Not a Jack-of-all-trades\n\nWhile a UX Designer’s role is multi-faceted and works alongside many organizational departments, they are happiest and most effective when collaborating with business teams to identify the best experience for users through research, testing and iteration of the product.\n\nA UX Designer underlies marketing, IT, and design departments. He (or she) is there to learn, test, inform and facilitate business teams to collaborate and produce the best digital brand experiences for your audience.\n\n#### Why do you need a UX specialist?\n\nA UX Designer brings value to business and audience alike through a deep understanding of the user and the provision of a desired experience. This does not pertain only to digital interfaces but every experience your audience has with your product or service.\n\nYour website, mobile app, social media content, retail point-of-sale, and even TV and print communications are all touch points that have a positive (or negative!) impression on your audience’s experience with your brand. A UX Designer is trained to view these touch points as a holistic ecosystem that engages, provides value and meaning and connects business goals and audience needs through a unified brand experience that matters to people.\n\nTake Apple, for example. As one of the most influential brands in the world, they’ve embraced UX as a core value of their brand promise. From the TV commercials to their retail experience to their events; throughout their marketing, Apple has told us an experiential story that not only engages, but becomes reality when we hold the iPhone in our hands.\n\nSo, perhaps a better question to ask is, \"Why wouldn't we need a UX Designer?\"\n\n#### Start small, go big\n\nFor many, implementing a UX process in an organization can be a daunting, and often, disruptive task. It might require a fundamental shift in how organizational roles and departments co-operate, how you take a product or campaign from concept to launch, and how you identify KPIs and measurements of success.\n\nThat’s a big ask, but it doesn’t need to be complicated. A UX process can be instilled through small, incremental changes. For example, rather than a complete redesign of your company’s website, a UX Designer can tackle key measurable areas, such as a shopping cart checkout page or a mobile app registration form. Through iterative testing and measurement, you’ll quickly see the results of a UX-led project on a smaller, measurable scale.\n\nThe results of these smaller-scale projects will surface other areas where UX Design can add value to your organization. Areas that will bring a positive impact to your bottom line and slowly, but surely establish a UX process as an integral part of your business’ success.\n\nNow, let's take a look at Airbnb. Arguably, one of the greatest market disruptions in the world (also see Uber). Airbnb has changed the hospitality industry forever. It's not only in the service, but the brand promise of experience. Airbnb has launched a product that has grown into a hugely successful business—forcing a multi-billion dollar hospitality industry to rethink how they operate—all under the radar. But how? They started small, focused on the experience and continuously iterated on the product offering. Today it's difficult to remember a world where they haven't existed, but think about this: Airbnb was founded only in 2008.\n\nToday, and the future, will be increasingly dominated by mobile, multi-screen and omni-channel marketing influenced by consumers, like you and me, who choose a product or service based entirely on meaningful experiences: on how we feel. Establishing a UX process in your organization allows you to anticipate communication and experiential challenges before your product is released, supports ongoing marketing and business decisions, and provides a launchpad for business innovation, differentiation and growth.\n\nToday, and the future, will be increasingly dominated by mobile, multi-screen and omni-channel marketing influenced by consumers, like you and me, who choose a product or service based entirely on meaningful experiences: on how we feel.\n\nEstablishing a UX process in your organization allows you to anticipate communication and experiential challenges before your product is released, supports ongoing marketing and business decisions, and provides a launchpad for business innovation, differentiation and growth.\n\nRemember, your audience always has options. So do you."},"date":"2017-02-28","imageGallery":null,"mainImage":null,"title":"What User Experience means for your next product launch.","subtitle":{"id":"cab954cd-7f3c-5a37-83b6-9d36aec70fc8","subtitle":"An op-ed piece I did for the Bangkok National newspaper."},"path":"what-ux-means-product-launch"},{"id":"53d2fe3e-b2bb-58ce-a640-cf989f5364c8","content":{"id":"a314469c-a002-5088-abde-284022711acc","content":"Sitemaps are useful for increasing the effectiveness of your SEO. If you head over to [Google's Search Console](https://search.google.com/search-console/about \"Google Search Console\") you'll find a section to upload a file called `sitemap.xml`. \n\nThere are many ways to create this file, from writing it manually (tedious) to having one of many sites out there index your site and generate the file for you. Either of those options are fine for smaller, static websites, but what if you have a large, high traffic, data driven site with constant updates? Well, then you run into problems :-( \n\nBut the solution is very easy.\n\n#### This example is done in Python, but the idea is the same for any language.\n\nFirst, this is what `sitemap.xml` looks like.\n\n```\n<?xml version='1.0' encoding='utf-8'?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n\t<url>\n\t\t<loc>https://www.yoursite.com/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>1.0</priority>\n\t</url>\n\t<url>\n\t\t<loc>https://www.yoursite.com/product/1/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>0.8</priority>\n\t</url>\n\t<url>\n\t\t<loc>https://www.yoursite.com/product/2/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>0.8</priority>\n\t</url>\n  \n  ...and so on ...\n</urlset>\n```\n\nThe first part is the XML declaration, which points to the schema on www.sitemaps.org. Following that are the nodes that point to pages on your website. As you can imagine, for large data driven websites with thousands of generated pages, maintaining this file can be really difficult.\n\n##### Let's start coding.\n\nStart by opening a new file in your text editor and add this block of code to generate the XML declaration and root `<url>` node:\n\n```\nimport xml.etree.cElementTree as ET\nfrom datetime import datetime\n\ndef generate_sitemap():\n\n    schema_loc = (\"http://www.sitemaps.org/schemas/sitemap/0.9 \"\n                  \"http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\")\n\n    root = ET.Element(\"urlset\")\n    root.attrib['xmlns:xsi'] = 'http://www.w3.org/2001/XMLSchema-instance'\n    root.attrib['xsi:schemaLocation'] = schema_loc\n    root.attrib['xmlns'] = \"http://www.sitemaps.org/schemas/sitemap/0.9\"\n    \n    tree = ET.ElementTree(root)\n        tree.write(\"sitemap.xml\",\n                   encoding='utf-8', xml_declaration=True)\n```\nWe've started by importing `xml.etree.cElementTree`, a built-in python package for parsing XML. Then we created a function called `generate_sitemap()`, in which we define XML schema info and the `<urlset>` node.\n\nAt this point, if you were to run this block of code in your Python Console, it would generate a sitemap.xml file in the current directory that looks sort of like this:\n\n```\n<?xml version='1.0' encoding='utf-8'?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n```\n\nSo we're off to a good start! Now under that, we're going to write code to generate our static pages like home page, login, registration, etc.\n\n```\n_url = \"https://www.your-website.com/\"  # <-- Your website domain.\ndt = datetime.now().strftime(\"%Y-%m-%d\")  # <-- Get current date and time.\n\ndoc = ET.SubElement(root, \"url\")\nET.SubElement(doc, \"loc\").text = _url\nET.SubElement(doc, \"lastmod\").text = dt\nET.SubElement(doc, \"changefreq\").text = 'weekly'\nET.SubElement(doc, \"priority\").text = \"1.0\"\n\ndoc = ET.SubElement(root, \"url\")\nET.SubElement(doc, \"loc\").text = (f\"{_url}login/\")\nET.SubElement(doc, \"lastmod\").text = dt\nET.SubElement(doc, \"changefreq\").text = 'weekly'\nET.SubElement(doc, \"priority\").text = \"0.6\"\n\ndoc = ET.SubElement(root, \"url\")\nET.SubElement(doc, \"loc\").text = f\"{_url}register/\"\nET.SubElement(doc, \"lastmod\").text = dt\nET.SubElement(doc, \"changefreq\").text = 'weekly'\nET.SubElement(doc, \"priority\").text = \"0.6\"\n```\n\nJust a lot of copy/paste going on. Let's break down what's happening here. We've set two variables:\n- `_url` is your website root url.\n- `dt` is the current date/time formatted as YYYY-MM-DD\n\nNext we create the `<url>` node as a sub element to the document like this: `doc = ET.SubElement(root, \"url\")`. Then we create the `<loc>`, `<lastmod>`, `<changefreq>`, and `<priority>` nodes, which are child nodes of the `<url>` node.\n\nJust for the sake of clarity, `f\"{_url}login/\"` is using string interpolation formatting to create your page URL. In this case, Python will render the string as `https://www.your-website.com/login`. This save us from having to write out your website URL over and over again.\n\nIf we were to run this code now, it will generate a file that looks like this:\n\n```\n<?xml version='1.0' encoding='utf-8'?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n\t<url>\n\t\t<loc>https://www.your-website.com/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>1.0</priority>\n\t</url>\n\t<url>\n\t\t<loc>https://www.your-website.com/login/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>0.8</priority>\n\t</url>\n\t<url>\n\t\t<loc>https://www.your-website.com/register/</loc>\n\t\t<lastmod>2019-03-29</lastmod>\n\t\t<changefreq>weekly</changefreq>\n\t\t<priority>0.8</priority>\n\t</url>\n</urlset>\n```\nPretty cool, right? But what about all those web pages that are generated by your CMS or database? I mean, we can't possibly copy/paste that much stuff.\n\n##### Querying your database\n\nFor this part I'm using Django as my frontend to Python. Again, you can use whatever framework or language you want, the idea is still the same. Open your Django app and copy/paste your code into views.py, updating it with the code below.\n\n```\nimport xml.etree.cElementTree as ET\nfrom datetime import datetime\n\nfrom django.http import HttpResponse # <-- We need this to return a response\nfrom .models import MyProductModel  # <-- Import my model\n\n\ndef generate_sitemap(request):\n\n    _url = \"https://www.your-website.com/\"  # <-- Your website domain.\n    dt = datetime.now().strftime(\"%Y-%m-%d\")  # <-- Get current date and time.\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = _url\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"1.0\"\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = (f\"{_url}login/\")\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"0.6\"\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = f\"{_url}register/\"\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"0.6\"\n    \n    return HttpResponse(status=\"200\")\n```\n\nWe've imported our database model `MyProductModel`, and since we're using Django, we updated our `generate_sitemap` function with the `request` argument and we added an HTTP response. \n\nIn short, we've made our sitemap.xml generator into a web page. I'll explain why further down. But first, let's write the code to generate all of our product pages in the CMS.\n```\nproducts = MyProductModel.objects.all()\n\nfor product in products:  # <-- Loop through product queryset\n  doc = ET.SubElement(root, \"url\")\n        ET.SubElement(doc, \"loc\").text = f\"{_url}{product.slug}/\"\n        ET.SubElement(doc, \"lastmod\").text = dt\n        ET.SubElement(doc, \"changefreq\").text = 'weekly'\n        ET.SubElement(doc, \"priority\").text = \"0.8\"\n```\nWhat we've done here is query our database for all \"product\" pages with `MyProductModel.objects.all()`, then loop through the queryset to generate `<url>` nodes for every page. This could be 10 products or 1000 or even more.\n\nLet's look at our `<loc>` node. We were smart from the beginning when we added products to our system because we added slug fields. So instead of a URL like `your-website.com/1028346?sku=28473849/` our product page urls are pretty like `your-website.com/good-life-product/`.\n\nAnyway, the final code looks like this:\n```\nimport xml.etree.cElementTree as ET\nfrom datetime import datetime\n\nfrom django.http import HttpResponse\nfrom .models import MyProductModel\n\n\ndef generate_sitemap(request):\n\n    _url = \"https://www.your-website.com/\"  # <-- Your website domain.\n    dt = datetime.now().strftime(\"%Y-%m-%d\")  # <-- Get current date and time.\n    \n    schema_loc = (\"http://www.sitemaps.org/schemas/sitemap/0.9 \"\n                  \"http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\")\n\n    root = ET.Element(\"urlset\")\n    root.attrib['xmlns:xsi'] = 'http://www.w3.org/2001/XMLSchema-instance'\n    root.attrib['xsi:schemaLocation'] = schema_loc\n    root.attrib['xmlns'] = \"http://www.sitemaps.org/schemas/sitemap/0.9\"\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = _url\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"1.0\"\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = (f\"{_url}login/\")\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"0.6\"\n\n    doc = ET.SubElement(root, \"url\")\n    ET.SubElement(doc, \"loc\").text = f\"{_url}register/\"\n    ET.SubElement(doc, \"lastmod\").text = dt\n    ET.SubElement(doc, \"changefreq\").text = 'weekly'\n    ET.SubElement(doc, \"priority\").text = \"0.6\"\n    \n    products = MyProductModel.objects.all()\n\n    for product in products:\n      doc = ET.SubElement(root, \"url\")\n            ET.SubElement(doc, \"loc\").text = f\"{_url}{product.slug}/\"\n            ET.SubElement(doc, \"lastmod\").text = dt\n            ET.SubElement(doc, \"changefreq\").text = 'weekly'\n            ET.SubElement(doc, \"priority\").text = \"0.8\"\n            \n    tree = ET.ElementTree(root)\n        tree.write(\"sitemap.xml\",\n                   encoding='utf-8', xml_declaration=True)\n    \n    return HttpResponse(status=\"200\")\n```\n\n##### Adding the page to your urls.py\n\nFor Google to read your sitemap it needs to be rendered as a static XML file and available in your root as `your-website.com/sitemap.xml`. This means we need to add it to our URL patterns as a `TemplateView` in our urls.py.\n\n```\n# project/urls.py\n\nfrom django.conf.urls import url\nfrom django.views.generic import TemplateView\n\nurlpatterns = [\n    url(r'^sitemap\\.xml$',\n        TemplateView.as_view(\n            template_name='sitemap.xml',\n            content_type='text/xml'\n            )\n        ),\n]\n```\n`TemplateView` will load sitemap.xml, as a static file, from the root of your templates directory. Remember you need to set the content_type to `text/xml` if you want the file to render correctly.\n\n<div class=\"uk-child-width-2-3@s uk-margin-large-top uk-margin-medium-bottom\" uk-grid>\n  <div>\n    <div class=\"uk-panel uk-background-primary uk-light uk-padding-small uk-border-rounded\">\n      On a side note, you can load other static files using `TemplateView`. Here's an example of a boilerplate I use to serve robots.txt, ServiceWorker.js, and manifest.json.\n    </div>\n  </div>\n</div>\n\n```\nfrom django.conf.urls import url\nfrom django.views.generic import TemplateView\n\n\nurlpatterns = [\n    url(r'^manifest\\.json$',\n        TemplateView.as_view(\n            template_name='manifest.json',\n            content_type='application/manifest+json'\n            )\n        ),\n    url(r'^ServiceWorker\\.js$',\n        TemplateView.as_view(\n            template_name='ServiceWorker.js',\n            content_type='application/javascript'\n            )\n        ),\n    url(r'^robots\\.txt$',\n        TemplateView.as_view(\n            template_name='robots.txt',\n            content_type='text/plain'\n            )\n        ),\n    url(r'^sitemap\\.xml$',\n        TemplateView.as_view(\n            template_name='sitemap.xml',\n            content_type='text/xml'\n            )\n        ),\n    url(r'^offline\\.html$',\n        TemplateView.as_view(\n            template_name='offline.html',\n            content_type='text/html'\n            )\n        ),\n]\n```\n\n##### Google Cloud App Engine &amp; Cron jobs\nOkay, so we have a url pattern set up to serve our sitemap.xml for search spiders, but how do we generate the file?\n\nWe're going to create a Cron job that automatically runs every couple of weeks, to generate our sitemap.xml, and save it to our templates directory.\n\n<div class=\"uk-child-width-2-3@s uk-margin-large-top uk-margin-medium-bottom\" uk-grid>\n  <div>\n    <div class=\"uk-panel uk-background-primary uk-light uk-padding-small uk-border-rounded\">\n      I'm not going to go into detail about setting up your project on Google Cloud, that's a whole other story. And again, you could be using another platform like AWS or even hosting yourself, it doesn't matter.\n    </div>\n  </div>\n</div>\n\nLet's create a url pattern for our `generate_sitemap` view and add it to the app urls.py:\n\n```\n# app/urls.py\n\nfrom django.conf.urls import url\n\nfrom . import views\n\nurlpatterns = [\n\n    ... other url patterns ...\n    \n    url(\n        r'^generate-sitemap/$',\n        views.generate_sitemap\n    ),\n]\n```\nNow you should be able to visit http://localhost:8000/generate-sitemap/ and your sitemap function will create the sitemap.xml file in your templates directory.\n\nExcellent.\n\nNext, in your project root directory, create a file called `cron.yaml` then add this:\n\n```\n# root/cron.yaml\n\ncron:\n- description: \"Generate MySitemap CRON\"\n  url: /generate-sitemap/\n  schedule: every 14 days\n  retry_parameters:\n    min_backoff_seconds: 120\n    max_doublings: 5\n```\nThis creates a Cron job for App Engine that will visit your generate_sitemap function at `www.your-website/generate-sitemap/` every 14 days to generate an updated sitemap.xml file and save it to your templates directory so that it's accessible by Google and other search engines.\n\nPush the Cron job to App Engine with this terminal command:\n\n`gcloud app deploy cron.yaml`\n\nThen visit your Google Console, under App Engine, you'll see a link for Cron jobs, where you'll find your new \"Generate MySitemap CRON\" job listed.\n\n![cron](//images.ctfassets.net/1nc0h0ipk4bl/3UnANf5TSGhKxHxwCe4e1i/8ffd2b1f499040d54d5b06ad057119c8/cron.png)\n\nOkay, you now have a Cron job set up to visit your sitemap generator every 14 days. But, there's a problem...\n\n##### Security?\n\nWe don't want just anybody to have access, we only want our Cron job to access the function. But then, we can't give the Cron job admin access either.\n\nSo, we're going to use headers to exclude any connections not from our Cron job. This is safe because the `x-appengine-cron` header is only passed within Google's network, meaning it's unlikely to be spoofed.\n\nWe need to update our view to block everybody except our Cron job.\n\n```\nimport xml.etree.cElementTree as ET\nfrom datetime import datetime\n\nfrom django.http import HttpResponse\nfrom .models import MyProductModel\n\n\ndef generate_sitemap(request):\n\n    _url = \"https://www.your-website.com/\"  # <-- Your website domain.\n    dt = datetime.now().strftime(\"%Y-%m-%d\")  # <-- Get current date and time.\n    \n    schema_loc = (\"http://www.sitemaps.org/schemas/sitemap/0.9 \"\n                  \"http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\")\n                  \n    if request.META.get('HTTP_X_APPENGINE_CRON'):  #  <-- check if the x-appengine-cron header exists\n      root = ET.Element(\"urlset\")\n      root.attrib['xmlns:xsi'] = 'http://www.w3.org/2001/XMLSchema-instance'\n      root.attrib['xsi:schemaLocation'] = schema_loc\n      root.attrib['xmlns'] = \"http://www.sitemaps.org/schemas/sitemap/0.9\"\n\n      doc = ET.SubElement(root, \"url\")\n      ET.SubElement(doc, \"loc\").text = _url\n      ET.SubElement(doc, \"lastmod\").text = dt\n      ET.SubElement(doc, \"changefreq\").text = 'weekly'\n      ET.SubElement(doc, \"priority\").text = \"1.0\"\n\n      doc = ET.SubElement(root, \"url\")\n      ET.SubElement(doc, \"loc\").text = (f\"{_url}login/\")\n      ET.SubElement(doc, \"lastmod\").text = dt\n      ET.SubElement(doc, \"changefreq\").text = 'weekly'\n      ET.SubElement(doc, \"priority\").text = \"0.6\"\n\n      doc = ET.SubElement(root, \"url\")\n      ET.SubElement(doc, \"loc\").text = f\"{_url}register/\"\n      ET.SubElement(doc, \"lastmod\").text = dt\n      ET.SubElement(doc, \"changefreq\").text = 'weekly'\n      ET.SubElement(doc, \"priority\").text = \"0.6\"\n\n      products = MyProductModel.objects.all()\n\n      for product in products:\n        doc = ET.SubElement(root, \"url\")\n              ET.SubElement(doc, \"loc\").text = f\"{_url}{product.slug}/\"\n              ET.SubElement(doc, \"lastmod\").text = dt\n              ET.SubElement(doc, \"changefreq\").text = 'weekly'\n              ET.SubElement(doc, \"priority\").text = \"0.8\"\n\n      tree = ET.ElementTree(root)\n          tree.write(\"sitemap.xml\",\n                     encoding='utf-8', xml_declaration=True)\n\n      return HttpResponse(status=\"200\")\n    else:\n      return HttpResponse(status=\"403\")  # <-- Return \"Not Allowed\" for everybody else.\n```\n\nNow you can deploy your project `gcloud app deploy` and test your Cron job by clicking the \"Run now\" button on your Cron page on Google Console.\n\nAnd that's it!"},"date":"2019-01-09","imageGallery":null,"mainImage":null,"title":"Auto-Generate your Sitemap.xml with Python and deploy it as a Cron job  to Google Cloud.","subtitle":{"id":"1c494d92-f5c2-5cf7-878c-cdc00680943e","subtitle":"A simple python script to automatically generate your sitemap.xml file using Cron on Google Cloud App Engine."},"path":"auto-generate-sitemap-python-gae"},{"id":"a7acb92c-e617-5410-ac16-650b16af96d7","content":{"id":"44a10ab1-e8b1-5fba-a9b8-610895010114","content":"#### Just a few little illustrations from my past life as a penciller for some comics you might've heard of, and others you might not.\n\n![vampirella](//images.ctfassets.net/1nc0h0ipk4bl/pGAVdDb52XMjlIMU9Yi9L/5ccb39cd75a8f4f252fbf1d4e6beb4f2/vampirella.jpg)\n\n\n\n---\n\n\n\n\n![psibers](//images.ctfassets.net/1nc0h0ipk4bl/5nVdqj48PDVgYensh5HxuB/7d979696f7cf077b878a03bfbb77c244/psibers.jpg)\n\n\n\n---\n\n\n\n"},"date":"2019-03-27","imageGallery":[{"id":"da94f9f6-4526-5993-9e2a-8263b6e213a5","file":{"fileName":"clown.gif","url":"//images.ctfassets.net/1nc0h0ipk4bl/7oMmzwSwCJuqWVfUWPNzTr/cc6d95dcfa0f13b4e6873a5c331f287e/clown.gif"},"title":"clown","description":""},{"id":"1236d995-2d16-59c9-8aba-9f5200abfbfa","file":{"fileName":"death.gif","url":"//images.ctfassets.net/1nc0h0ipk4bl/A0CfrGdC3XyXLIDRUwt85/08b5e8463104782e5afc305c5a058589/death.gif"},"title":"death","description":""},{"id":"7304568a-93e3-5dc3-8098-c78898ff6f92","file":{"fileName":"ladytron.gif","url":"//images.ctfassets.net/1nc0h0ipk4bl/446JKaP3UCYchSe23SbCv7/c893e1a3dfe552f9dcfe6555904a3f84/ladytron.gif"},"title":"ladytron","description":""},{"id":"8caa8e39-3ba3-5303-9878-2cf231aa6592","file":{"fileName":"popemonkey.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/61CX7I1omkrSiZjIR8tuGG/e8ae51b2bc8a53d48059bdb3d7f65623/popemonkey.jpg"},"title":"popemonkey","description":""},{"id":"8db03d4e-4c99-555f-9bcf-a090f9b0b8ae","file":{"fileName":"psibot.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/6xOWWz5Go8ITov3wxljLnc/e30b42c4a92b3a82662aec5e7a701c53/psibot.jpg"},"title":"psibot","description":""},{"id":"5dcfc013-94ad-5347-b328-bfdf3202e9f9","file":{"fileName":"FB_IMG_1454945739866.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/6cWjoPtHkTUKAGWwbljcec/a889da1a3b75ae2f12946a801d0443d7/FB_IMG_1454945739866.jpg"},"title":"wh2","description":""}],"mainImage":{"id":"6c11be5a-aeaf-53a2-8d64-21c094628bd7","file":{"fileName":"manson.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/5wIENATpkL4vrXC8pJOQAk/9a927d2e67c60c2b5c3265020df55c30/manson.jpg"}},"title":"I Dropped Medical School to Draw Comic Books.","subtitle":{"id":"a694d498-c536-51d2-a445-719326925814","subtitle":"Ever since, it's been a life-long conflict as my right brain and left brain wage an epic battle for dominance."},"path":"i-dropped-medical-school-to-draw-comics"},{"id":"f52e5fd4-1884-5330-90ee-a0c9caf20b23","content":{"id":"e479e968-d2f3-54c9-b807-3228e7251c87","content":"Influen$e relies heavily on data generated through multiple micro-services and API calls, all in real time. Early on, I wanted to set up the platform to use Google BigQuery for data warehousing, allowing us to work with real-time data in smaller chunks.\n\n<section class=\"uk-section uk-section-small\">\n\t<div class=\"content-box uk-container uk-container-small uk-padding-small uk-width-1-2@s\">\n\t\t<h4 class=\"uk-text-center\">Shortcut this</h4>\n\t\t<h5 class=\"uk-text-center\">\n            If you know what you're doing, you can get the code from GitHub.\n        </h5>\n\t\t<div class=\"uk-text-center\">\n\t\t\t<a class=\"uk-button uk-button-large uk-button-secondary\"\n                href=\"https://github.com/MichaelLisboa/python-pandas-bigquery\">\n\t\t\t\tGet it on GitHub\n\t\t\t</a>\n\t\t</div>\n\t</div>\n</section>\n\n#### Trying to make a complicated set up as easy as possible to implement.\nWhen I first started researching how to do this, it all seemed really complicated. I was scouring the web and reading articles, pulling little bits of useful information from many different sources.\n\nIn the end, I came up with a hacked together solution that I refined down to, what I believe, is the simplest execution.\n\n##### What we're going to do.\n\n1. Query data in Django.\n2. Model that data, using Pandas, to a workable DataFrame.\n3. Push the data to Google BigQuery.\n4. Create a Cron job to run nightly pushes.\n\nWhile this is a real-world example, the point of this exercise is to get a basic understanding of the steps required for setting it all up. So, I'll simplify things by only using a single query.\n\n#### Setting up Google BigQuery.\n\nI'm going to skip setting up a Google Cloud project, assuming you've already made it this far. We'll start with getting BigQuery set up.\n\nFirst, you need to go [here and enable the API in your Google Project](https://console.cloud.google.com/flows/enableapi?apiid=bigquery&_ga=2.182927334.-1396141278.1552049696&pli=1&angularJsUrl=%2Fflows%2Fenableapi%3Fapiid%3Dbigquery%26_ga%3D2.182927334.-1396141278.1552049696%26pli%3D1&authuser=1 \"Google BigQuery API\")\n\nGoogle has a really really good walkthrough of [setting up the environment here.](https://cloud.google.com/bigquery/docs/quickstarts/quickstart-web-ui \"BigQuery quick start\")\n\nOnce you have the API setup in your project, an option for BigQuery should be present in your console menu. There you'll see a screen like this:\n\n![gbq-step-1](//images.ctfassets.net/1nc0h0ipk4bl/1Lq8v6SU2cElAFp8KD8Aoo/356cf0a9e7bc4516a69e4469aae19ecd/gbq-step-1.png)\n\n##### Create a DataSet\nClicking on the \"Create Dataset\" button will display this screen:\n\n![gbq-step-2](//images.ctfassets.net/1nc0h0ipk4bl/cTzGLGf0wk0RV7QAIa5J1/fbf739ee665c0c3fc066bd22fbf533aa/gbq-step-2.png)\n\nName your DataSet, in this case I'm calling it `MyDataId`, and choose the zone closest to you. For me, I've selected Singapore. Go ahead and click the Create DataSet button to get your first DataSet set up in BigQuery.\n\nNow that we have a DataSet, we need to add tables to it. To keep things simple, we're going to add only one table. Select your `MyDataId`, and click Create Table to add a new empty table and call it `MyDataTable`. Don't worry about other settings at the moment, an empty table that's editable as text works for our case.\n\n![gbq-step-5](//images.ctfassets.net/1nc0h0ipk4bl/IZGItB3zAIT8qPBVj0Uz0/a46b41bb175fd7fb40d3f3894320f8a2/gbq-step-5.png)\n\nOkay, we now have a DataSet with an empty table set up. We'll be able to reference our table in Python using `MyDataId.MyDataTable`.\n\n##### Let's make our Django View.\n\nGo to your Django app `views.py` and create a new function. I'm calling it `push_bigquery()`. We'll start with creating a queryset for \"MyMembers\":\n```\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncDate\nfrom django.http import HttpResponse\n\nimport pandas as pd\nfrom common.models import MyMembersModel\n\n\ndef push_bigquery(request):\n    members_qs = (\n        MyMembersModel\n        .objects\n        .prefetch_related(\"profile__thing\")\n        .annotate(\n            created_date=TruncDate('profile__thing__timestamp'),\n            count=Count('profile__thing')\n        )\n        .order_by('created_date')\n        .distinct()\n    ).values('created_date', 'name', 'slug', 'count', 'profile__thing')\n    \nmembers_df = pd.DataFrame(members_qs)\n\n```\nWhat we've done here is query our `MyMembers` table and related `Things`, as `values()`, which will return a `dict`-like queryset.\n\nSidenote, I'm also truncating the timstamp using `TruncDate`, which casts the expression to a date rather than using the built-in SQL `truncate` method.\n\nThen we create our Pandas DataFrame from the values with `members_df = pd.DataFrame(members_qs)`\n\n##### Basic data modeling.\n\nWe're going to do some simple modeling to format our DataFrame. Again, we're keeping this simple, I'm assuming you're already knowledgable about formatting data with Pandas.\n\nAdd the following to your function:\n```\npd.to_datetime(df['created_date'])\nmembers_df.set_index(df['created_date'], inplace=True)\n\nmembers_df['count_cumsum'] = members_df['count'].cumsum(axis=0)\n\nmembers_df['label_cumsum'] = members_df.groupby('name')['count'].cumsum()\n\nmembers_df['thing_cumsum'] = (\n    members_df\n    .groupby(df.index)['profile__thing']\n    .cumsum()\n)\n\nmembers_df['frequency_of_thing'] = (\n    members_df['label_cumsum'] / members_df['thing_cumsum'] * 100\n)\n```\nI've started by converting the `created_date` series to datetime and set it as the index.\n\nThen we're getting the cumulative sum of the number of \"things\", and cumulative sum of \"labels\" associated with \"things\". And finally the cumulative sum of \"things\" by each \"member\".\n\nYeah, I know that sounds really confusing...\n\nWe're doing this because we're looking to get the frequency of things `members_df['frequency_of_thing']` by individual members and comparing that to the whole community.\n\nNext we want to format our DataFrame by selecting the Series' we want, filtering out any NaN values and resetting the index:\n```\nmembers_df = members_df[\n    ['name', 'slug', 'label_cumsum', 'thing_cumsum', 'frequency_of_thing']\n]\nmembers_df = members_df[pd.notnull(df['thing_cumsum'])]\nmembers_df.reset_index(inplace=True)\n```\nOkay, our `members_df` is where we want it so we can push it to BigQuery. You'll find this frustratingly simple:\n\n```\nmembers_df.to_gbq(\n    'MyDataId.MyDataTable',\n    project_id='your-gcp-project',\n    if_exists='replace'\n)\n```\nThat's it.\n\nWe're using Pandas `to_gbq` to send our DataFrame to BigQuery.\n\n- `'MyDataId.MyDataTable'` references the DataSet and table we created earlier.\n- `project_id` is obviously the ID of your Google Cloud project.\n- `if_exists` is set to replace the content of the BigQuery table if the table already exists.\n\n##### About if_exists.\n\nIn this case, if the table already exists in BigQuery, we're replacing all of the data. You don't want to do that in the real world. \n\n`if_exists` has a couple of other arguments,\n\n- `fail`, which raises an exception if you try to write to the table, and\n- `append` which is our preferred option in this case, which will append your data to the existing table.\n\n##### One other thing\n\nIn my case, not only do I want to push all my data to BigQuery, I also wanted a subset of that data for fast lookups across different services. To do this I pickeled the last 3 months of my dataset with:\n\n```\nmembers_df.last('3M').to_pickle('members_df.pkl')\n```\nOur final function looks like this:\n```\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncDate\nfrom django.http import HttpResponse\n\nimport pandas as pd\nfrom common.models import MyMembersModel\n\n\ndef push_bigquery(request):\n    members_qs = (\n        MyMembersModel\n        .objects\n        .prefetch_related(\"profile__thing\")\n        .annotate(\n            created_date=TruncDate('profile__thing__timestamp'),\n            count=Count('profile__thing')\n        )\n        .order_by('created_date')\n        .distinct()\n      ).values('created_date', 'name', 'slug', 'count', 'profile__thing')\n\n    members_df = pd.DataFrame(members_qs)\n\n    pd.to_datetime(df['created_date'])\n    members_df.set_index(df['created_date'], inplace=True)\n\n    members_df['count_cumsum'] = members_df['count'].cumsum(axis=0)\n\n    members_df['label_cumsum'] = members_df.groupby('name')['count'].cumsum()\n\n    members_df['thing_cumsum'] = (\n        members_df\n        .groupby(df.index)['profile__thing']\n        .cumsum()\n    )\n\n    members_df['frequency_of_thing'] = (\n        members_df['label_cumsum'] / members_df['thing_cumsum'] * 100\n    )\n\n    members_df = members_df[\n        ['name', 'slug', 'label_cumsum', 'thing_cumsum', 'frequency_of_thing']\n    ]\n    members_df = members_df[pd.notnull(df['thing_cumsum'])]\n    members_df.reset_index(inplace=True)\n\n    members_df.to_gbq(\n        'MyDataId.MyDataTable',\n        project_id='your-gcp-project',\n        if_exists='replace'\n    )\n\n    members_df.last('3M').to_pickle('members_df.pkl')\n\n    return HttpResponse(status=200)\n```\n\nWe could do a bit more optimization with Pandas and Threading, but this is good enough for the purpose of this article.\n\n##### Google Cloud App Engine &amp; Cron jobs\nWe're going to set up a Cron job on Google App Engine to run our BigQuery program nightly.\n\nLet's create a url pattern for our `push_bigquery` view and add it to the app urls.py:\n\n```\n# app/urls.py\n\nfrom django.conf.urls import url\n\nfrom . import views\n\nurlpatterns = [\n\n    ... other url patterns ...\n    \n    url(\n        r'^push-gbq/$',\n        views.push_bigquery\n    ),\n]\n```\nNow you should be able to visit http://localhost:8000/push-gbq/ and the function will run, cerating the DataFrame, pushing it to BigQuery, and pickeling your DataFrame.\n\nTo make sure it works, take a look at BigQuery in your Google Cloud Console. You should see your table update with your data. Also, you should see a new `.pkl` file called \"members_df.pkl\" in your local project root directory.\n\nNext, in your project root directory, create a file called `cron.yaml` and add this:\n\n```\n# root/cron.yaml\n\ncron:\n- description: \"Push GBQ CRON\"\n  url: /push-gbq/\n  schedule: every 24 hours\n  retry_parameters:\n    min_backoff_seconds: 120\n    max_doublings: 5\n```\nThis creates a Cron job for App Engine that will visit your push_bigquery function at `www.your-website/push-gbq/` every 24 hours to push your latest data to BigQuery. Depending on your situation, you'll probably want to change the frequency this runs in your `cron.yaml` file.\n\nPush the Cron job to App Engine with this terminal command:\n\n`gcloud app deploy cron.yaml`\n\n##### Security\n\nMake sure you set up your function to only accept requests with the `x-appengine-cron` header!\n\nNow you can deploy your project `gcloud app deploy` and test your Cron job by clicking the \"Run now\" button on your Cron page in Google Console.\n"},"date":"2019-03-30","imageGallery":[{"id":"e440d0da-7e0c-5286-be0e-0cccfa0cf016","file":{"fileName":"gbq-step-1.png","url":"//images.ctfassets.net/1nc0h0ipk4bl/1Lq8v6SU2cElAFp8KD8Aoo/356cf0a9e7bc4516a69e4469aae19ecd/gbq-step-1.png"},"title":"gbq-step-1","description":""},{"id":"2290d000-2809-594a-87cf-c3c96888c296","file":{"fileName":"gbq-step-2.png","url":"//images.ctfassets.net/1nc0h0ipk4bl/cTzGLGf0wk0RV7QAIa5J1/fbf739ee665c0c3fc066bd22fbf533aa/gbq-step-2.png"},"title":"gbq-step-2","description":""},{"id":"f2e4f4b0-acea-547f-bc42-359fd2e30e16","file":{"fileName":"gbq-step-3.png","url":"//images.ctfassets.net/1nc0h0ipk4bl/7tewmCE7oJX0jzFN3E5wKk/f86a63c1b3dd3290298d48847615ccb3/gbq-step-3.png"},"title":"gbq-step-3","description":""},{"id":"c9622b42-20fa-557a-afae-a7c05599f2f0","file":{"fileName":"gbq-step-4.png","url":"//images.ctfassets.net/1nc0h0ipk4bl/2qeKMLyRhLW0q7hUgdoHgc/8f3306427756afc303e4f77991979d57/gbq-step-4.png"},"title":"gbq-step-4","description":""},{"id":"ab86b88d-d847-5c3d-b22f-d68784e56705","file":{"fileName":"gbq-step-5-detail.png","url":"//images.ctfassets.net/1nc0h0ipk4bl/8laAGPcPtJaWstNVCI0iQ/e252e3f144870a0743c5da5780aa417a/gbq-step-5-detail.png"},"title":"gbq-step-5-detail","description":""},{"id":"b35de04b-f2db-5e10-bd94-188b1e3a314b","file":{"fileName":"gbq-step-5.png","url":"//images.ctfassets.net/1nc0h0ipk4bl/IZGItB3zAIT8qPBVj0Uz0/a46b41bb175fd7fb40d3f3894320f8a2/gbq-step-5.png"},"title":"gbq-step-5","description":""},{"id":"ed45c114-acb7-5d32-9b54-6810dce55730","file":{"fileName":"gbq-step-6.png","url":"//images.ctfassets.net/1nc0h0ipk4bl/1joeSzZgWNLbVImOGggaFV/0e89161ef0519856d8ac3a2618776b1e/gbq-step-6.png"},"title":"gbq-step-6","description":""}],"mainImage":null,"title":"Using Python and Pandas With Google BigQuery.","subtitle":{"id":"9602f817-9aea-5949-8204-db4cd7fd963b","subtitle":"In this \"how to\", we'll be using Django to query a dataset, format that data using Pandas, then pushing the DataFrame to Google BigQuery as our data warehouse."},"path":"python-pandas-google-bigquery"},{"id":"0bc9d53b-5622-5371-bc30-b8a42eedd22b","content":{"id":"6c82fc24-492b-50f9-b043-3a732e4bbeec","content":"##### It was my first time in Cambodia, and I enjoyed every minute of it.\n\n\nEver since I was a kid, I always wanted to be an archaeologist. Not the boring, scholarly type - I mean the fighting Nazis, raiding tombs and jumping off of cliffs type of archaeologist.\n\nWe arrived during the annual water festival, an annual religious holiday similar to Song Kran in Thailand, so we went out to explore Pub Street to join the party.\n\nSurprisingly, Vicky only got mad at me once, so I must have done something right!\n\n<div class=\"contentEmbed\">\n<h6>Here's a video #MadeOnMyPhone</h6>\n<a href=\"https://vimeo.com/219046108\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"></a>\n</div>\n\nThe next day we were off to the temples! After sitting in traffic for two hours (who knew that everybody would be going to the temples on a religious journey), we finally made it to the temples.\n\nNeedless to say, walking through the temple ruins in Siem Reap rekindled those Indiana Jones dreams. Maybe it's time for a career change..."},"date":"2017-05-22","imageGallery":[{"id":"a6e97450-5572-5061-9ea4-53771f31bc52","file":{"fileName":"IMG_20170415_100605664_HDR-02.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/5WsExLDlaqxiOIUIDOaF0E/9ea19873224de088cc545e6eda6cfb9d/IMG_20170415_100605664_HDR-02.jpg"},"title":"IMG 20170415 100605664 HDR-02","description":""},{"id":"802aa1f0-0b3c-5478-a664-cce0e29939e8","file":{"fileName":"IMG_20170415_114236844_HDR-01.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/167Kq4PFndb50WW6q6uvYe/8c2e2d37210dd851c9595246b1ccba43/IMG_20170415_114236844_HDR-01.jpg"},"title":"IMG 20170415 114236844 HDR-01","description":""},{"id":"d3c2c5ad-4c54-5f94-a4c1-5281bf29f40f","file":{"fileName":"IMG_20170415_100025950-01.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/52sl1UTkMeItgqScuvu4e7/4e7913784160bb38b97bb97c707ce6bb/IMG_20170415_100025950-01.jpg"},"title":"IMG 20170415 100025950-01","description":""},{"id":"824f1d9d-04e9-5a02-8a00-28165bd39c96","file":{"fileName":"IMG_20170415_095446175-01.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/5dPOYHEb3I6URJGuCrYyiZ/115dee3ed652bbac8f7a69c54160f6cb/IMG_20170415_095446175-01.jpg"},"title":"IMG 20170415 095446175-01","description":""},{"id":"d5d8bde1-4c40-5335-a16c-076795e82546","file":{"fileName":"IMG_20170415_120556874-01.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/6Erv1XxJ34Eh2BY0yrMpLi/4528b61aaf98a5fa854b80aedbdf00eb/IMG_20170415_120556874-01.jpg"},"title":"IMG 20170415 120556874-01","description":""},{"id":"6f090050-5d56-5d10-a997-44083abddc9d","file":{"fileName":"IMG_20170415_121903349_HDR-01-01.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/D4PzuG65eqqGNJSZtXHUL/a815a3851f2fb2e4d07fd84b0aa78261/IMG_20170415_121903349_HDR-01-01.jpg"},"title":"Siem Reap","description":""}],"mainImage":{"id":"6f090050-5d56-5d10-a997-44083abddc9d","file":{"fileName":"IMG_20170415_121903349_HDR-01-01.jpg","url":"//images.ctfassets.net/1nc0h0ipk4bl/D4PzuG65eqqGNJSZtXHUL/a815a3851f2fb2e4d07fd84b0aa78261/IMG_20170415_121903349_HDR-01-01.jpg"}},"title":"#MadeOnMyPhone 36 hours in Cambodia edition","subtitle":{"id":"d142bb98-28a2-5ef9-af95-874d8b9234cb","subtitle":"What do you do when you suddenly realize you need to leave Thailand for a Visa run?\nBook a last minute flight to Siem Reap to check out the temples, of course!"},"path":"36-hours-in-cambodia"},{"id":"f782394a-c6fb-5afc-a8e9-ea8dc322bf7d","content":{"id":"62378bd6-9c5a-54ab-aaeb-b47b6c6d1781","content":"##### While developing Influen$e, I wanted to make the search function a bit more robust for people searching for an influencer's Instagram account by name.\n\nBecause discovery is a critical distinguishing feature of Influen$e, I also wanted to build in a simple recommendation function that targeted customers based on the relevance of influencers' content to their core brand values.\n\nIn this article, I'll share the code and walk you through how the function works.\n\n<section class=\"uk-section uk-section-small\">\n\t<div class=\"content-box uk-container uk-container-small uk-padding-small uk-width-1-2@s\">\n\t\t<h4 class=\"uk-text-center\">Shortcut this</h4>\n\t\t<h5 class=\"uk-text-center\">\n            If you know what you're doing, you can get the code from GitHub.\n        </h5>\n\t\t<div class=\"uk-text-center\">\n\t\t\t<a class=\"uk-button uk-button-large uk-button-secondary\"\n                href=\"https://github.com/MichaelLisboa/suggest-search-vanillaJS\">\n\t\t\t\tGet it on GitHub\n\t\t\t</a>\n\t\t</div>\n\t</div>\n</section>\n\n##### Let's begin\nWe'll start with our search form. It looks like this:\n\n<div class=\"uk-padding uk-padding-remove-horizontal\">\n  <form id=\"SearchMemberForm\" class=\"uk-width-1-3@s\">\n      <div class=\"uk-margin-small\">\n          <div class=\"uk-inline uk-width-1-1\">\n              <button id=\"MemberSubmit\" type=\"submit\" class=\"uk-form-icon uk-form-icon-flip\" uk-icon=\"icon: search\"></button>\n              <input id=\"MemberInput\" type=\"search\" name=\"ig_handle\" class=\"member-search-input uk-input uk-form-large\" placeholder=\"e.g., cristiano\" autocapitalize=\"none\" autocorrect=\"off\" autocomplete=\"off\">\n      </div>\n  </form>\n</div>\n\nI'm using UIKit 3 for my CSS framework, so this part is easy. Here's the code:\n\n        <form id=\"SearchMemberForm\">\n            <div class=\"uk-margin-small\">\n                <div class=\"uk-inline uk-width-1-1\">\n                    <button id=\"MemberSubmit\" type=\"submit\"\n                      class=\"uk-form-icon uk-form-icon-flip\"\n                      uk-icon=\"icon: search\"></button>\n                    <input id=\"MemberInput\" type=\"search\" name=\"ig_handle\"\n                      class=\"member-search-input uk-input uk-form-large\"\n                      placeholder=\"e.g., cristiano\" autocapitalize=\"none\"\n                      autocorrect=\"off\" autocomplete=\"off\" />\n                    <div id=\"PresetMember\" class=\"uk-width-1-1 uk-margin-remove\"\n                      uk-dropdown=\"mode: click; pos: bottom-justify;\n                      boundary: .member-search-input\"></div>\n                </div>\n            </div>\n        </form>        \n\n##### Getting the data with Fetch\nThe first thing we need to do is get an Array of objects to populate suggestions, right? So, we'll make a request to an API or cloud function or whatever.\n\nI'm using Fetch because all I need is a JSON object, but if you want more granular control you can use XHR just the same.\n\n```\nfetch('://<server>/api/', {\n      method: \"GET\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers = {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          'X-Requested-With': 'XMLHttpRequest'\n      };\n  })\n  .then(res => res.json())\n  .then(json => {\n      console.log(`JSON response ${json}`)\n  })\n  .catch(error => console.log(error));\n```\n\n__Fetch is pretty straightforward:__\n- I send a `GET` request to my API endpoint at `://<server>/api/`.\n- `.then(res => res.json())` renders the response as JSON.\n- `.then(json => {})` is where we can use that JSON.\n- `.catch(error =>...);` catches any errors in our request.\n\n<div class=\"uk-child-width-2-3@s uk-margin-large-top uk-margin-medium-bottom\" uk-grid>\n  <div>\n    <div class=\"uk-panel uk-background-primary uk-light uk-padding-small uk-border-rounded\">\n      One thing to bear in mind, Fetch doesn't do any error checking, it only returns a fail if something went wrong with the actual request to the server, like a 404 or 500. So, you'll need to write your own error catching code.\n    </div>\n  </div>\n</div>\n\nIf you run that code, you'll get an array of objects. In my case it's an Array of social media influencer objects:\n\n\n![json-response](//images.ctfassets.net/1nc0h0ipk4bl/2L96k8OKFe4cUVSZBzALCD/962961953a3236c6e8446b8363292726/json-response.png)\n\n##### Coding the UI\nNow we need to turn that Array into a nice drop down list. There are two types of lists I'm going to generate.\n- One will be for automated recommendations when the user clicks the search field.\n- The other will be our suggest-as-you-type list.\n\nTo do that, we'll pass our Array to a new function, called `loadLists()`. Let's update our Fetch response to call `loadLists(json)`.\n\n        fetch(endpoint, {\n            method: \"GET\",\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers: headers,\n        })\n        .then(response => response.json())\n        .then(json => loadLists(json))  // <-- Call loadLists() here\n        .catch(error => console.log(error));\nThis passes our Array of member objects to a new function called `loadLists()`:\n\n        let loadLists = (json) => {\n            let members = [...json.members];\n\n            let searchSuggest = ['input', function(e) {\n                    filterList(event.target.value, members);\n                }, false];\n\n            formInput.addEventListener(...searchSuggest);\n            presetMembers.innerHTML = userList(members.slice(0, 3));\n        }\n\nThere's a couple of things going on here.\n\n- First, we're using a spread operator `[...json.members]` to get to the objects in our array.\n- Next, we're creating an Array called `searchSuggest`, and within calling the `filterList()` function.\n- Then, we add an event listener to the input field in our HTML form.\n- And finally, we're loading the top three recommended influencers into the `presetMembers` drop down menu (I'll get to that soon).\n\nThe reason we created the `searchSuggest` Array is because we want to pass the event and the function call to our event listener. It's just a cleaner way of separating our functions.\n\nOkay, let's have a look at the `filterList();` function.\n\n        let filterList = (key, members) => {\n            let listEl = document.getElementById('MemberList');\n            listEl.innerHTML = '';  // <-- Clear the field to avoid repeated entries.\n\n            for (let i = 0; i < members.length; i++) {\n                if ((members[i].ig_handle.toLowerCase())\n                    .indexOf(key.toLowerCase()) > -1) {\n                    let node = () => (\n                        `<li class=\"member-link\">\n                            ${members[i].ig_handle}\n                        </li>`\n                    );\n                    if (listEl.childNodes.length < 5) {\n                        listEl.insertAdjacentHTML('beforeend', node());\n                    }\n                }\n                if (key.length < 2) {\n                    listEl.innerHTML = '';\n                    presetMembers.innerHTML = userList(members.slice(0, 3));\n                }\n            }\n        };\n\nWow, that's the biggest chunk of code so far. Let's walk through it.\n\nFirst, we're looking at a couple of arguments `key` and `members`. So the argument `members` is obviously our Array of members we got from our Fetch API call.\n\nBut what is `key`?\n\nRemember when we created that Array called `searchSuggest`? Reminder, the event we added is\n\n```\nsearchSuggest = ['input', function(e) {...\n```\n\nWe're adding an event listener for `input`, basically saying for every character the user types into our form field, fire the `input` event. Get it? The `input` event is a keystroke, which is our `key` argument.\n\nIn other words, every time a user types a character into our search field, fire the `filterList()` function.\n\nNext, we're getting the `MemberList` element from our HTML. This is where we'll generate our member list.\n\nLet's take a look at our `for loop`.\n\nIn this line we're converting all text to lowercase so our searches will be case insensitive:\n```\nif ((members[i].ig_handle.toLowerCase()).indexOf(key.toLowerCase()) > -1)\n```\nThen for each character entered, we iterate through our members list and create a new list item node:\n```\nlet node = () => (\n    `<li class=\"member-link\">\n        ${members[i].ig_handle}\n    </li>`\n);\n```\n`${members[i].ig_handle}` is how we're identifying our members. In my case I'm looking them up by the Instagram username `ig_handle`.\n\nThen we get up to five members and add them to our list using `insertAdjacentHTML`:\n```\nif (listEl.childNodes.length < 5) {\n    listEl.insertAdjacentHTML('beforeend', node());\n}\n```\n\nAnd finally, if the user enters less than two characters -- or backspaces to less than two characters -- reload our `presetMembers`, hiding our suggestions:\n```\nif (key.length < 2) {\n    listEl.innerHTML = '';\n    presetMembers.innerHTML = userList(members.slice(0, 3));\n}\n```\n\n##### Stitching it all together\n\nLet get our elements using `getElementById`.\n```\nlet formInput = document.getElementById('MemberInput')  // <-- form <input> field\nlet presetMembers = document.getElementById('PresetMember');  // <-- div for our list\n```\n\nThen we're going to use ES6 template literals to generate our `<ul>` markup that we're inserting into the `presetmember` div.\n\n```\nlet userListItem = (item) => (\n    `<li class=\"uk-width-1-1\">\n        <img class=\"uk-border-circle uk-width-1-4 uk-float-left\" src=\"${item.profile_pic}\" data-uk-image />\n        <p class=\"uk-width-3-4 uk-text-lead uk-text-truncate uk-padding-small uk-padding-remove-vertical\">${item.ig_handle}</p>\n    </li>`\n);\n\nlet userList = (list) => (\n    `<ul id=\"MemberList\" class=\"uk-list uk-list-divider uk-padding-remove-vertical\">\n        ${list.map(userListItem).join('')}\n    </ul>`\n);\n```\n\nSave the file and (hopefully) it should all work beautifully!"},"date":"2019-02-20","imageGallery":null,"mainImage":{"id":"9b203371-1377-57af-9d16-8541e98a0aa2","file":{"fileName":"javascript-suggest-as-you-type.png","url":"//images.ctfassets.net/1nc0h0ipk4bl/5PWScNM7w6EHCXcGF9schW/ec50ccb8d28975d75379ffd559d56cc2/javascript-suggest-as-you-type.png"}},"title":"A “suggest-as-you-type” search widget in 57 lines of JavaScript code.","subtitle":{"id":"2276e522-8410-5b77-b078-6ccd468801ba","subtitle":"A how-to for an effective search widget that shows suggestions as you type, in plain JavaScript, and using the Fetch API to GET content."},"path":"suggest-as-you-type-search-widget"},{"id":"83d6013d-be7e-5f44-b14d-f24ef2430b2b","content":{"id":"53fffcd7-ad46-57b8-833c-44477d2dc358","content":"#### #MadeOnMyPhone\nIm not really all that active on social media, and the idea of taking a selfie just makes me laugh. Who'd want to see my ugly mug?\n\nBut, when I have some quiet time, I like to shoot and edit movies on my phone. Here's some low budget Thai-style horror flicks that I did for Halloween.\n\n#### I borrowed a friend's kids for these\n<div class=\"contentEmbed\">\n<a href=\"https://youtu.be/3hBpUeBD94Q\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"></a>\n</div>\n<div class=\"contentEmbed\">\n<a href=\"https://youtu.be/VoHbN8fwwRs\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"></a>\n</div>\n\n#### Even jellyfish are creepy\n<div class=\"contentEmbed\">\n<a href=\"https://youtu.be/oVuWKYKOmjo\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"></a>\n</div>\n\n#### Fin\n<div class=\"contentEmbed\">\n<a href=\"https://youtu.be/gMGnzq5oOKY\" class=\"embedly-card\" data-card-width=\"100%\" data-card-controls=\"0\"></a>\n</div>"},"date":"2019-10-25","imageGallery":null,"mainImage":{"id":"e50da6ef-cde8-574f-8b80-ab155db2cc2e","file":{"fileName":"hannah.png","url":"//images.ctfassets.net/1nc0h0ipk4bl/5gqYWMu3rsVP4BKHwvB0Ps/f6a5c8e59d36f9923320902e880f6a15/hannah.png"}},"title":"#MadeOnMyPhone Halloween edition","subtitle":{"id":"0908d0f7-827c-59ef-8ff0-6bf18982b072","subtitle":"Scary Kids, Halloween Vids. Even the cutest kids can be creepy as hell with the right soundtrack."},"path":"scary-kids-halloween-vids"},{"id":"7c4438c6-ffc5-5a97-bdf8-0e4597eac12f","content":{"id":"a20e5621-0ee3-5c7a-91ce-ea0d9852dc51","content":"### First, a little backstory\n\nA couple of years ago, I left the advertising agency world to focus on launching my startup, while subsidizing my income by freelancing. When I finally got around to setting up my site I decided to try my hand at React.\n\n![screen-roll](//images.ctfassets.net/1nc0h0ipk4bl/6YZrB11zuva32aZwgryH6L/fbcbe5a3300df8737e851d14e2ec7cff/screen-roll.png)\n\n###### <em>It should be easy to turn your website into a PWA, right?</em>\n\n\nOnce I did that, the next obvious step was to make it an installable PWA, because _the future of mobile apps_ is just a simple matter of adding a site manifest and some icons.\n\nEasy right?\n\n### Small annoyance. Huge impact.\n\nAlthough recent versions of iOS have better support for PWA’s, there’s still no built in prompt for users to install the app, as is present on Android. This all but defeats the purpose of an installable web app simply for the reason that iOS users won’t know they can install it!\n\n![1 L0kz9p1y L63UWM9PUb9gw](//images.ctfassets.net/1nc0h0ipk4bl/3dcdEzMXVy1UH9nHY4VcV9/fede87b376272e003071260ab35b76af/1_L0kz9p1y_L63UWM9PUb9gw.png)\n\n###### <em>Android v. iOS: targeting a similar experience on different devices.</em>\n\n#### Anyway,\n\nHere’s a little React hook to deliver an “Add to Home Screen,” notification to iOS users. I’m sure there’s a better way to do this, but thought I’d share what works for me.\n\nOkay, let’s start coding.\n\n* * *\n\n### The Hook\n\nThe whole point of this hook is to load a notification _only for Safari on iOS,_ so we’re going to create a new file called `useIsIOS.js`. In this code we’re going to do a few things:\n\n*   Check if someone is viewing our app on an iOS device.\n*   Are they using mobile Safari?\n*   Have they _not_ been prompted to install the app before?\n\nIf all of the above is `true`, then we’ll send them a prompt to install the app and, in the background, store a `hasBeenPrompted` item in browser localStorage with a timestamp.\n\nWe’ll start with creating a state for `isIOS` with `useState`.\n\n    // useIsIOS.js\n    import {useState, useEffect} from \"react\";\n\n    export default function useIsIOS() {\n      const [isIOS, setIsIOS] = useState({});\n\n      useEffect(() => {\n          setIsIOS(checkForIOS());\n          return() => console.log(\"CLEANUP INSTALL PROMPT\", isIOS);\n      }, []);\n\n      return isIOS;\n    }\n\nThis is pretty simple:\n\n*   `const[isIOS, setIsIOS] = useState({});` initializes a state — similar to `setState` in class function. On init, the state is an empty object by setting`useState({})`.\n*   Then we use `useEffect` to do our checks from above.\n\nAt the moment, this does nothing except for try to run the `checkForIOS()` function. So let’s update our file to make it work!\n\n    //useIsIOS.js\n    import {useState, useEffect} from \"react\";\n    import moment from \"moment\"; // <-- new\n    \n    function checkForIOS() {\n      const today = moment().toDate();\n      const lastPrompt = moment(localStorage.getItem(\"installPrompt\"));\n      const days = moment(today).diff(lastPrompt, \"days\");\n\n      ...\n    }\n\nWe’ll install moment.js `npm install --save moment`, then import moment into our hook. We’re using moment to set & check timestamps to see if and when a user has been invited to install our app.\n\nGetting into our `checkForIOS()` function, we’ll start by setting some variables, using moment, including a timestamp for `today`, `lastPrompt` (if it exists), and finally, the number of `days` since we last prompted our visitor to install the app.\n\n![astro-logo-setch](//images.ctfassets.net/1nc0h0ipk4bl/V0bfb8neABn9Xn4zVji62/0f350694cc1dc45aeacce36bf05dbb02/astro-logo-setch.png)\n\n###### <em>A quick sketch of Astro turned logo, turned splash screen.</em>\n\nLooking at `lastPrompt`, you’ll see we’re trying to get an “installPrompt” key from the browser localStorage. If it exists, we use `moment()` to convert it into a `Date` object, otherwise it returns `undefined`. Perfect!\n\nNext, have a look at `days`. This is where we’re checking the time difference, in days, of today compared to the last time the user was prompted to install our app. If they haven’t been prompted before, then we prompt them now!\n\n### Check for devices, browser, and OS\n\nI tried a few different options, but this seems to be the most reliable method for identifying Safari and device types on iOS. We’re updating our `checkForIOS()` function with some old-school, pedantic JavaScript.\n\n    //useIsIOS.js\n    \n    function checkForIOS() {\n      const ua = window.navigator.userAgent;\n      const webkit = !!ua.match(/WebKit/i);\n      const isIPad = !!ua.match(/iPad/i);\n      const isIPhone = !!ua.match(/iPhone/i)\n      const isIOS = isIPad || isIPhone;\n      const isSafari = isIOS && webkit && !ua.match(/CriOS/i);\n    }\n\n###### Typical JS.\n\n> It’s important to ensure that our iOS visitor is using Safari because iOS doesn’t permit other browsers to install our awesome PWA’s!\n\n### Do we prompt?\n\nNow that we have our timestamp and device info, we can check if we should send our website visitors a notification to install our PWA.\n\n    function checkForIOS() {\n      ...\n\n      const prompt = (isNaN(days) || days > 30) && isIOS && isSafari;\n\n      if (prompt && \"localStorage\" in window) {\n          localStorage.setItem(\"installPrompt\", today);\n      }\n\n      return {isIOS, isSafari, prompt};\n    }\n\nLooking at our `prompt` variable, we’re saying:\n\n*   “if our visitor has no stored timestamp — `isNaN(days)` — or we haven’t notified them to install our PWA in over 30 days,\n*   “and, they’re viewing our website on an iOS device,\n*   “and, they’re using the Safari browser,\n*   then set `prompt` to true”\n\nDepending on whether our visitor meets all the criteria, `prompt` will return true or false.\n\nAnd finally, if `prompt` is true then save the current timestamp, `today`, in the browser’s `localStorage` so we don’t continue to annoy our visitors with the notification popup to install our PWA.\n\n![prompt-zoom](//images.ctfassets.net/1nc0h0ipk4bl/6aO97xHH70Yc55pkifr42t/2456d82b9be30525c176899511a6f3f8/prompt-zoom.png)\n\n###### <em>Our invitation to install should be clear and instructive, without being intrusive.</em>\n\n### One more thing\n\nOkay this is all great, but what if our visitor has already installed our awesome PWA, and is viewing our app there, _not via iOS Safari browser_?\n\nWe just need to add a little bit of code:\n\n    function checkForIOS() {\n      if (navigator.standalone) {\n        return false;\n      }\n      ...\n    }\n\n###### Is it Safari or PWA?\n\nThe `navigator.standalone` check is asking, “is our visitor using the mobile Safari browser, or the installed PWA?” If this check returns `false` then everything stops. This means visitors who’ve installed, and use, our awesome PWA, will not get the notification to install.\n\nAfter all of that, here’s what our final React hook looks like:\n\n    import {useState, useEffect} from \"react\";\n    import moment from \"moment\";\n    \n    function checkForIOS() {\n        if (navigator.standalone) {\n          return false;\n        }\n        const today = moment().toDate();\n        const lastPrompt = moment(localStorage.getItem(\"installPrompt\"));\n        const days = moment(today).diff(lastPrompt, \"days\");\n        const ua = window.navigator.userAgent;\n        const webkit = !!ua.match(/WebKit/i);\n        const isIPad = !!ua.match(/iPad/i);\n        const isIPhone = !!ua.match(/iPhone/i)\n        const isIOS = isIPad || isIPhone;\n        const isSafari = isIOS && webkit && !ua.match(/CriOS/i);\n    \n        const prompt = (isNaN(days) || days > 30) && isIOS && isSafari;\n    \n        if (prompt && \"localStorage\" in window) {\n          localStorage.setItem(\"installPrompt\", today);\n        }\n    \n        return {isIOS, isSafari, prompt};\n    }\n    \n    export default function useIsIOS() {\n        const [isIOS, setIsIOS] = useState({});\n    \n        useEffect(() => {\n          setIsIOS(checkForIOS());\n          return() => console.log(\"CLEANUP INSTALL PROMPT\", isIOS);\n        }, []);\n    \n        return isIOS;\n    }\n\n### The Modal\n\nHere’s where we make our notification. In my case, I had to use a custom `useModal` hook for my purposes, but there are a ton of useModal hook examples out there, so choose whatever suits you best.\n\n    //InstallPWA.js\n    import React, { useEffect } from \"react\";\n    import Modal from \"../Modal\";\n    import { useModal } from \"../Hooks/useModal\";\n    \n    import \"./PWA.css\";\n    import image from \"../../images/LogoMark.png\";\n    import share from \"../../images/AppleShare.png\";\n    \n    export const InstallPWA = ({...props}) => {\n        const [modalOpen, setModalOpen, toggleModal] = useModal();\n\n        useEffect(\n            () => {\n              setModalOpen(true)\n            }, []\n        )\n        return (\n              <Modal\n                  isActive={modalOpen}\n                  className=\"notification-card\">\n                  <div className=\"uk-container uk-container-small uk-flex uk-flex-middle uk-flex-center uk-height-1-1\">\n                      <div style={{maxWidth: \"400px\"}} className=\"uk-card uk-card-default uk-card-body\">\n                          <div style={{marginTop: \"-50px\"}} className=\"uk-text-center\">\n                              <img\n                                  src={image}\n                                  className=\"uk-border-rounded\"\n                                  height=\"72\"\n                                  width=\"72\"\n                                  alt=\"Install PWA\"\n                                  />\n                          </div>\n                          <div className=\"uk-margin-top uk-text-center\">\n                              <h3>Install Bevyho!</h3>\n                          </div>\n                          <p className=\"uk-h4 uk-text-muted uk-text-center uk-margin-remove-top\">Install this application on your homescreen for a better experience.</p>\n                          <div className=\"uk-text-center\">\n                              <p className=\"uk-text-small\">\n                              Tap\n                              <img\n                                  src={share}\n                                  style={{margin: \"auto 4px 8px\"}}\n                                  className=\"uk-display-inline-block\"\n                                  alt=\"Add to homescreen\"\n                                  height=\"20\"\n                                  width=\"20\"\n                                  />\n                              then &quot;Add to Home Screen&quot;\n                              </p>\n                          </div>\n                          <button className=\"uk-button button-minimal\" onClick={() => setModalOpen(false)}>Close</button>\n                      </div>\n                  </div>\n              </Modal>\n          )\n      }\n\n###### My modal code. Feel free to take, or use your own. :-)\n\n### The Usage\n\nSimply import the useIsIOS hook and `InstallPWA` component and away we go!\n\n    //Home.js or whatever\n    import React from \"react\";\n    import useIsIOS from \"../Hooks/useIsIOS\";\n    import {InstallPWA} from \"../InstallPWA\";\n\n    const Home = props => {\n        const { prompt } = useIsIOS();\n\n        return (\n            ...\n            {prompt && <InstallPWA />}\n            ...\n        )\n    }\n    export default Home;\n\nIn this example, we’re loading our install prompt in the home page component with `const { prompt } = useIsIOS();`\n\nDoing this provides the `prompt = true/false` state to our component. Awesome, right?\n\nSo now, we can easily load our notification prompt with:\n\n`{prompt && <InstallPWA />}`\n\nThis effectively says, “If our visitor is using an iOS device, _and_ they are using mobile Safari, _and_ they haven’t been prompted in the last 30 days, **and** they’re not visiting our site from our installed PWA, then show them a prompt to “Add to Home Screen”.\n\n##### Finally, a thank you,\n\nFor reading all the way to the bottom of the page. I hope this was helpful to at least one person. Feel free to comment with questions, revelations, insults, etc.\n\nHere’s a link to the source code on GitHub:\n##### MichaelLisboa/react-portfolio-site\nhttps://github.com/MichaelLisboa/react-portfolio-site"},"date":"2020-01-20","imageGallery":null,"mainImage":{"id":"35b56785-44bb-55e6-9e0b-ec861969360e","file":{"fileName":"hero.png","url":"//images.ctfassets.net/1nc0h0ipk4bl/7Dr8d2rxVpEvbqB21qHYjW/003dc2e93d261100b11793be2fe7be53/hero.png"}},"title":"A Simple React Hook to Prompt iOS Users to Install Your Wonderful PWA.","subtitle":{"id":"3fb3084d-b868-5c1d-814e-0ba56644143e","subtitle":"Or, “HAHA, why isn’t this thing working?!”"},"path":"prompt-ios"}]}},"pageContext":{}}}