{"componentChunkName":"component---src-templates-blog-detail-js","path":"/blog/prompt-ios","result":{"data":{"contentfulBlog":{"id":"7c4438c6-ffc5-5a97-bdf8-0e4597eac12f","imageGallery":null,"date":"2020-01-20","title":"A Simple React Hook to Prompt iOS Users to Install Your Wonderful PWA.","subtitle":{"id":"3fb3084d-b868-5c1d-814e-0ba56644143e","subtitle":"Or, “HAHA, why isn’t this thing working?!”"},"slug":"prompt-ios","mainImage":{"id":"35b56785-44bb-55e6-9e0b-ec861969360e","file":{"url":"//images.ctfassets.net/1nc0h0ipk4bl/7Dr8d2rxVpEvbqB21qHYjW/003dc2e93d261100b11793be2fe7be53/hero.png","fileName":"hero.png"}},"content":{"id":"a20e5621-0ee3-5c7a-91ce-ea0d9852dc51","content":"### First, a little backstory\n\nA couple of years ago, I left the advertising agency world to focus on launching my startup, while subsidizing my income by freelancing. When I finally got around to setting up my site I decided to try my hand at React.\n\n![screen-roll](//images.ctfassets.net/1nc0h0ipk4bl/6YZrB11zuva32aZwgryH6L/fbcbe5a3300df8737e851d14e2ec7cff/screen-roll.png)\n\n###### <em>It should be easy to turn your website into a PWA, right?</em>\n\n\nOnce I did that, the next obvious step was to make it an installable PWA, because _the future of mobile apps_ is just a simple matter of adding a site manifest and some icons.\n\nEasy right?\n\n### Small annoyance. Huge impact.\n\nAlthough recent versions of iOS have better support for PWA’s, there’s still no built in prompt for users to install the app, as is present on Android. This all but defeats the purpose of an installable web app simply for the reason that iOS users won’t know they can install it!\n\n![1 L0kz9p1y L63UWM9PUb9gw](//images.ctfassets.net/1nc0h0ipk4bl/3dcdEzMXVy1UH9nHY4VcV9/fede87b376272e003071260ab35b76af/1_L0kz9p1y_L63UWM9PUb9gw.png)\n\n###### <em>Android v. iOS: targeting a similar experience on different devices.</em>\n\n#### Anyway,\n\nHere’s a little React hook to deliver an “Add to Home Screen,” notification to iOS users. I’m sure there’s a better way to do this, but thought I’d share what works for me.\n\nOkay, let’s start coding.\n\n* * *\n\n### The Hook\n\nThe whole point of this hook is to load a notification _only for Safari on iOS,_ so we’re going to create a new file called `useIsIOS.js`. In this code we’re going to do a few things:\n\n*   Check if someone is viewing our app on an iOS device.\n*   Are they using mobile Safari?\n*   Have they _not_ been prompted to install the app before?\n\nIf all of the above is `true`, then we’ll send them a prompt to install the app and, in the background, store a `hasBeenPrompted` item in browser localStorage with a timestamp.\n\nWe’ll start with creating a state for `isIOS` with `useState`.\n\n    // useIsIOS.js\n    import {useState, useEffect} from \"react\";\n\n    export default function useIsIOS() {\n      const [isIOS, setIsIOS] = useState({});\n\n      useEffect(() => {\n          setIsIOS(checkForIOS());\n          return() => console.log(\"CLEANUP INSTALL PROMPT\", isIOS);\n      }, []);\n\n      return isIOS;\n    }\n\nThis is pretty simple:\n\n*   `const[isIOS, setIsIOS] = useState({});` initializes a state — similar to `setState` in class function. On init, the state is an empty object by setting`useState({})`.\n*   Then we use `useEffect` to do our checks from above.\n\nAt the moment, this does nothing except for try to run the `checkForIOS()` function. So let’s update our file to make it work!\n\n    //useIsIOS.js\n    import {useState, useEffect} from \"react\";\n    import moment from \"moment\"; // <-- new\n    \n    function checkForIOS() {\n      const today = moment().toDate();\n      const lastPrompt = moment(localStorage.getItem(\"installPrompt\"));\n      const days = moment(today).diff(lastPrompt, \"days\");\n\n      ...\n    }\n\nWe’ll install moment.js `npm install --save moment`, then import moment into our hook. We’re using moment to set & check timestamps to see if and when a user has been invited to install our app.\n\nGetting into our `checkForIOS()` function, we’ll start by setting some variables, using moment, including a timestamp for `today`, `lastPrompt` (if it exists), and finally, the number of `days` since we last prompted our visitor to install the app.\n\n![astro-logo-setch](//images.ctfassets.net/1nc0h0ipk4bl/V0bfb8neABn9Xn4zVji62/0f350694cc1dc45aeacce36bf05dbb02/astro-logo-setch.png)\n\n###### <em>A quick sketch of Astro turned logo, turned splash screen.</em>\n\nLooking at `lastPrompt`, you’ll see we’re trying to get an “installPrompt” key from the browser localStorage. If it exists, we use `moment()` to convert it into a `Date` object, otherwise it returns `undefined`. Perfect!\n\nNext, have a look at `days`. This is where we’re checking the time difference, in days, of today compared to the last time the user was prompted to install our app. If they haven’t been prompted before, then we prompt them now!\n\n### Check for devices, browser, and OS\n\nI tried a few different options, but this seems to be the most reliable method for identifying Safari and device types on iOS. We’re updating our `checkForIOS()` function with some old-school, pedantic JavaScript.\n\n    //useIsIOS.js\n    \n    function checkForIOS() {\n      const ua = window.navigator.userAgent;\n      const webkit = !!ua.match(/WebKit/i);\n      const isIPad = !!ua.match(/iPad/i);\n      const isIPhone = !!ua.match(/iPhone/i)\n      const isIOS = isIPad || isIPhone;\n      const isSafari = isIOS && webkit && !ua.match(/CriOS/i);\n    }\n\n###### Typical JS.\n\n> It’s important to ensure that our iOS visitor is using Safari because iOS doesn’t permit other browsers to install our awesome PWA’s!\n\n### Do we prompt?\n\nNow that we have our timestamp and device info, we can check if we should send our website visitors a notification to install our PWA.\n\n    function checkForIOS() {\n      ...\n\n      const prompt = (isNaN(days) || days > 30) && isIOS && isSafari;\n\n      if (prompt && \"localStorage\" in window) {\n          localStorage.setItem(\"installPrompt\", today);\n      }\n\n      return {isIOS, isSafari, prompt};\n    }\n\nLooking at our `prompt` variable, we’re saying:\n\n*   “if our visitor has no stored timestamp — `isNaN(days)` — or we haven’t notified them to install our PWA in over 30 days,\n*   “and, they’re viewing our website on an iOS device,\n*   “and, they’re using the Safari browser,\n*   then set `prompt` to true”\n\nDepending on whether our visitor meets all the criteria, `prompt` will return true or false.\n\nAnd finally, if `prompt` is true then save the current timestamp, `today`, in the browser’s `localStorage` so we don’t continue to annoy our visitors with the notification popup to install our PWA.\n\n![prompt-zoom](//images.ctfassets.net/1nc0h0ipk4bl/6aO97xHH70Yc55pkifr42t/2456d82b9be30525c176899511a6f3f8/prompt-zoom.png)\n\n###### <em>Our invitation to install should be clear and instructive, without being intrusive.</em>\n\n### One more thing\n\nOkay this is all great, but what if our visitor has already installed our awesome PWA, and is viewing our app there, _not via iOS Safari browser_?\n\nWe just need to add a little bit of code:\n\n    function checkForIOS() {\n      if (navigator.standalone) {\n        return false;\n      }\n      ...\n    }\n\n###### Is it Safari or PWA?\n\nThe `navigator.standalone` check is asking, “is our visitor using the mobile Safari browser, or the installed PWA?” If this check returns `false` then everything stops. This means visitors who’ve installed, and use, our awesome PWA, will not get the notification to install.\n\nAfter all of that, here’s what our final React hook looks like:\n\n    import {useState, useEffect} from \"react\";\n    import moment from \"moment\";\n    \n    function checkForIOS() {\n        if (navigator.standalone) {\n          return false;\n        }\n        const today = moment().toDate();\n        const lastPrompt = moment(localStorage.getItem(\"installPrompt\"));\n        const days = moment(today).diff(lastPrompt, \"days\");\n        const ua = window.navigator.userAgent;\n        const webkit = !!ua.match(/WebKit/i);\n        const isIPad = !!ua.match(/iPad/i);\n        const isIPhone = !!ua.match(/iPhone/i)\n        const isIOS = isIPad || isIPhone;\n        const isSafari = isIOS && webkit && !ua.match(/CriOS/i);\n    \n        const prompt = (isNaN(days) || days > 30) && isIOS && isSafari;\n    \n        if (prompt && \"localStorage\" in window) {\n          localStorage.setItem(\"installPrompt\", today);\n        }\n    \n        return {isIOS, isSafari, prompt};\n    }\n    \n    export default function useIsIOS() {\n        const [isIOS, setIsIOS] = useState({});\n    \n        useEffect(() => {\n          setIsIOS(checkForIOS());\n          return() => console.log(\"CLEANUP INSTALL PROMPT\", isIOS);\n        }, []);\n    \n        return isIOS;\n    }\n\n### The Modal\n\nHere’s where we make our notification. In my case, I had to use a custom `useModal` hook for my purposes, but there are a ton of useModal hook examples out there, so choose whatever suits you best.\n\n    //InstallPWA.js\n    import React, { useEffect } from \"react\";\n    import Modal from \"../Modal\";\n    import { useModal } from \"../Hooks/useModal\";\n    \n    import \"./PWA.css\";\n    import image from \"../../images/LogoMark.png\";\n    import share from \"../../images/AppleShare.png\";\n    \n    export const InstallPWA = ({...props}) => {\n        const [modalOpen, setModalOpen, toggleModal] = useModal();\n\n        useEffect(\n            () => {\n              setModalOpen(true)\n            }, []\n        )\n        return (\n              <Modal\n                  isActive={modalOpen}\n                  className=\"notification-card\">\n                  <div className=\"uk-container uk-container-small uk-flex uk-flex-middle uk-flex-center uk-height-1-1\">\n                      <div style={{maxWidth: \"400px\"}} className=\"uk-card uk-card-default uk-card-body\">\n                          <div style={{marginTop: \"-50px\"}} className=\"uk-text-center\">\n                              <img\n                                  src={image}\n                                  className=\"uk-border-rounded\"\n                                  height=\"72\"\n                                  width=\"72\"\n                                  alt=\"Install PWA\"\n                                  />\n                          </div>\n                          <div className=\"uk-margin-top uk-text-center\">\n                              <h3>Install Bevyho!</h3>\n                          </div>\n                          <p className=\"uk-h4 uk-text-muted uk-text-center uk-margin-remove-top\">Install this application on your homescreen for a better experience.</p>\n                          <div className=\"uk-text-center\">\n                              <p className=\"uk-text-small\">\n                              Tap\n                              <img\n                                  src={share}\n                                  style={{margin: \"auto 4px 8px\"}}\n                                  className=\"uk-display-inline-block\"\n                                  alt=\"Add to homescreen\"\n                                  height=\"20\"\n                                  width=\"20\"\n                                  />\n                              then &quot;Add to Home Screen&quot;\n                              </p>\n                          </div>\n                          <button className=\"uk-button button-minimal\" onClick={() => setModalOpen(false)}>Close</button>\n                      </div>\n                  </div>\n              </Modal>\n          )\n      }\n\n###### My modal code. Feel free to take, or use your own. :-)\n\n### The Usage\n\nSimply import the useIsIOS hook and `InstallPWA` component and away we go!\n\n    //Home.js or whatever\n    import React from \"react\";\n    import useIsIOS from \"../Hooks/useIsIOS\";\n    import {InstallPWA} from \"../InstallPWA\";\n\n    const Home = props => {\n        const { prompt } = useIsIOS();\n\n        return (\n            ...\n            {prompt && <InstallPWA />}\n            ...\n        )\n    }\n    export default Home;\n\nIn this example, we’re loading our install prompt in the home page component with `const { prompt } = useIsIOS();`\n\nDoing this provides the `prompt = true/false` state to our component. Awesome, right?\n\nSo now, we can easily load our notification prompt with:\n\n`{prompt && <InstallPWA />}`\n\nThis effectively says, “If our visitor is using an iOS device, _and_ they are using mobile Safari, _and_ they haven’t been prompted in the last 30 days, **and** they’re not visiting our site from our installed PWA, then show them a prompt to “Add to Home Screen”.\n\n##### Finally, a thank you,\n\nFor reading all the way to the bottom of the page. I hope this was helpful to at least one person. Feel free to comment with questions, revelations, insults, etc.\n\nHere’s a link to the source code on GitHub:\n##### MichaelLisboa/react-portfolio-site\nhttps://github.com/MichaelLisboa/react-portfolio-site"}}},"pageContext":{"slug":"prompt-ios"}}}